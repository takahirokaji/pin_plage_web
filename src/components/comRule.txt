ここにコンポーネントのルールを書いておきます
Atomic Designは５要素にコンポーネントを分割していくデザイン手法です

Atom - UIの最小単位。それ以上機能的に分割できないもの。ボタンとかテキストとか。
Molecule - Atomを組み合わせて作られる要素。検索フォームとか。
Organisms - MoleculesやAtomを組み合わせて作られる要素。ヘッダーとかがイメージしやすい。Moleculeとの違いは単一の機能でなく複数の役割を持つこと
Template - Organismsを組み合わせたもの。いわゆるワイヤーフレーム（簡単に言えば「何を・どこに・どのように」が記載された「サイト設計図」）
Pages - 実際の文言などのデータがTemplateに注ぎ込まれたもの。

～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～
その１ スタイルクローズド

スタイルと呼ぶものの中にも二つの種類がある

１、見た目のスタイル
２、レイアウトのスタイル

１⇒”対象のコンポーネントの見た目を定義するもの”
２⇒“レイアウトのスタイル”⇒単位がmolecule以上のコンポーネントは、内部のコンポーネントをどのようにレイアウトするかを定義するスタイルのコト

「子コンポーネントは親コンポーネントの"レイアウトのスタイル"を知ってはならない」
「親コンポーネントは子コンポーネントの"見た目のスタイル"を知ってはならない」ということです。

理由　再利用性が低くなる

～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～

その２　可変にするスタイルを見極める
「原則的にスタイルはコンポーネントに閉じたものにする。可変にする必要・メリットが出てきた時に可変にする」

～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～
その３　3度目の法則
タイトルは 「リファクタリング(Martin Fowlerの本)」 からパクってきました。概念上はAtomに分解できなくはないけど、1箇所でしか使われないUIパーツ、あると思います。これはデザインシステムをどう作って行きたいかの方針にもよるんですが、原則コンポーネント化の目的は再利用性を高めることです。

なので、そもそも再利用の必要性がないものに関してはコンポーネントとして切り出さないほうが結果として無駄なファイルが減らせて良いと思います。

ここで提案したいのが 3度目の法則。要は3回出現したら単一のコンポーネントとして切り出す、というルールを設けると意思決定がスムーズかと思います。
好みによっては 3回でなく2回でもいいかもしれません。


全部qiitaからの引用です～ 'フロントエンドのコンポーネント設計に立ち向かう' https://qiita.com/seya/items/8814e905693f00cdade2